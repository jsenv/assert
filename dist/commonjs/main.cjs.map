{
  "version": 3,
  "file": "main.cjs",
  "sources": [
    "../../src/internal/isComposite.js",
    "../../src/internal/findPreviousComparison.js",
    "../../src/internal/object-subtype.js",
    "../../src/internal/compare.js",
    "../../src/internal/symbolToWellKnownSymbol.js",
    "../../src/internal/propertyNameToDotNotationAllowed.js",
    "../../src/internal/propertyToAccessorString.js",
    "../../src/internal/comparisonToPath.js",
    "../../src/internal/wellKnownValue.js",
    "../../src/internal/valueToString.js",
    "../../src/internal/toErrorMessage/anyComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/defaultComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/referenceComparisonToErrorMessage.js",
    "../../src/internal/comparisonToRootComparison.js",
    "../../src/internal/findSelfOrAncestorComparison.js",
    "../../src/internal/toErrorMessage/prototypeComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/createDetailedMessage.js",
    "../../src/internal/toErrorMessage/propertiesComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/propertiesOrderComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/symbolsComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/symbolsOrderComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/setSizeComparisonToMessage.js",
    "../../src/internal/toErrorMessage/mapEntryComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/notComparisonToErrorMessage.js",
    "../../src/internal/toErrorMessage/arrayLengthComparisonToMessage.js",
    "../../src/internal/toErrorMessage/comparisonToErrorMessage.js",
    "../../src/assertionError.js",
    "../../src/assert.js"
  ],
  "sourcesContent": [
    "export const isComposite = (value) => {\n  if (value === null) return false\n  if (typeof value === \"object\") return true\n  if (typeof value === \"function\") return true\n  return false\n}\n\nexport const isPrimitive = (value) => !isComposite(value)\n",
    "/* eslint-disable no-use-before-define */\n// https://github.com/dmail/dom/blob/e55a8c7b4cda6be2f7a4b1222f96d028a379b67f/src/visit.js#L89\n\nexport const findPreviousComparison = (comparison, predicate) => {\n  const createPreviousIterator = () => {\n    let current = comparison\n    const next = () => {\n      const previous = getPrevious(current)\n      current = previous\n      return {\n        done: !previous,\n        value: previous,\n      }\n    }\n    return {\n      next,\n    }\n  }\n\n  const iterator = createPreviousIterator()\n  let next = iterator.next()\n  while (!next.done) {\n    const value = next.value\n    if (predicate(value)) {\n      return value\n    }\n    next = iterator.next()\n  }\n  return null\n}\n\nconst getLastChild = (comparison) => {\n  return comparison.children[comparison.children.length - 1]\n}\n\nconst getDeepestChild = (comparison) => {\n  let deepest = getLastChild(comparison)\n  while (deepest) {\n    const lastChild = getLastChild(deepest)\n    if (lastChild) {\n      deepest = lastChild\n    } else {\n      break\n    }\n  }\n  return deepest\n}\n\nconst getPreviousSibling = (comparison) => {\n  const { parent } = comparison\n  if (!parent) return null\n  const { children } = parent\n  const index = children.indexOf(comparison)\n  if (index === 0) return null\n  return children[index - 1]\n}\n\nconst getPrevious = (comparison) => {\n  const previousSibling = getPreviousSibling(comparison)\n  if (previousSibling) {\n    const deepestChild = getDeepestChild(previousSibling)\n\n    if (deepestChild) {\n      return deepestChild\n    }\n    return previousSibling\n  }\n  const parent = comparison.parent\n  return parent\n}\n",
    "export const isRegExp = (value) =>\n  somePrototypeMatch(value, ({ constructor }) => constructor && constructor.name === \"RegExp\")\n\nexport const isArray = (value) =>\n  somePrototypeMatch(value, ({ constructor }) => constructor && constructor.name === \"Array\")\n\nexport const isError = (value) =>\n  somePrototypeMatch(value, ({ constructor }) => constructor && constructor.name === \"Error\")\n\nexport const isSet = (value) =>\n  somePrototypeMatch(value, ({ constructor }) => constructor && constructor.name === \"Set\")\n\nexport const isMap = (value) =>\n  somePrototypeMatch(value, ({ constructor }) => constructor && constructor.name === \"Map\")\n\nexport const somePrototypeMatch = (value, predicate) => {\n  let prototype = Object.getPrototypeOf(value)\n  while (prototype) {\n    if (predicate(prototype)) return true\n    prototype = Object.getPrototypeOf(prototype)\n  }\n  return false\n}\n",
    "import { isPrimitive } from \"./isComposite.js\"\nimport { findPreviousComparison } from \"./findPreviousComparison.js\"\nimport { isSet, isMap, isRegExp, isError, isArray, somePrototypeMatch } from \"./object-subtype.js\"\n\nexport const compare = ({ actual, expected }, { anyOrder }) => {\n  const comparison = createComparison({\n    type: \"root\",\n    actual,\n    expected,\n  })\n  comparison.failed = !defaultComparer(comparison, { anyOrder })\n  return comparison\n}\n\nconst expectationSymbol = Symbol.for(\"expectation\")\n\nconst createExpectation = (data) => {\n  return {\n    [expectationSymbol]: true,\n    data,\n  }\n}\n\nexport const createNotExpectation = (value) => {\n  return createExpectation({\n    type: \"not\",\n    expected: value,\n    comparer: ({ actual }) => {\n      if (isNegativeZero(value)) {\n        return !isNegativeZero(actual)\n      }\n      if (isNegativeZero(actual)) {\n        return !isNegativeZero(value)\n      }\n      return actual !== value\n    },\n  })\n}\n\nexport const createAnyExpectation = (expectedConstructor) => {\n  return createExpectation({\n    type: \"any\",\n    expected: expectedConstructor,\n    comparer: ({ actual }) => {\n      return somePrototypeMatch(\n        actual,\n        ({ constructor }) =>\n          constructor &&\n          (constructor === expectedConstructor || constructor.name === expectedConstructor.name),\n      )\n    },\n  })\n}\n\nconst createComparison = ({ parent = null, children = [], ...rest }) => {\n  const comparison = {\n    parent,\n    children,\n    ...rest,\n  }\n  return comparison\n}\n\nconst defaultComparer = (comparison, options) => {\n  const { actual, expected } = comparison\n\n  if (typeof expected === \"object\" && expected !== null && expectationSymbol in expected) {\n    subcompare(comparison, {\n      ...expected.data,\n      actual,\n      options,\n    })\n    return !comparison.failed\n  }\n\n  if (isPrimitive(expected) || isPrimitive(actual)) {\n    compareIdentity(comparison, options)\n    return !comparison.failed\n  }\n\n  const expectedReference = findPreviousComparison(\n    comparison,\n    (referenceComparisonCandidate) =>\n      referenceComparisonCandidate !== comparison &&\n      referenceComparisonCandidate.expected === comparison.expected,\n  )\n  if (expectedReference) {\n    if (expectedReference.actual === comparison.actual) {\n      subcompare(comparison, {\n        type: \"reference\",\n        actual: expectedReference,\n        expected: expectedReference,\n        comparer: () => true,\n        options,\n      })\n      return true\n    }\n    subcompare(comparison, {\n      type: \"reference\",\n      actual: findPreviousComparison(\n        comparison,\n        (referenceComparisonCandidate) =>\n          referenceComparisonCandidate !== comparison &&\n          referenceComparisonCandidate.actual === comparison.actual,\n      ),\n      expected: expectedReference,\n      comparer: ({ actual, expected }) => actual === expected,\n      options,\n    })\n    if (comparison.failed) return false\n    // if we expectedAReference and it did not fail, we are done\n    // this expectation was already compared and comparing it again\n    // would cause infinite loop\n    return true\n  }\n\n  const actualReference = findPreviousComparison(\n    comparison,\n    (referenceComparisonCandidate) =>\n      referenceComparisonCandidate !== comparison &&\n      referenceComparisonCandidate.actual === comparison.actual,\n  )\n  if (actualReference) {\n    subcompare(comparison, {\n      type: \"reference\",\n      actual: actualReference,\n      expected: null,\n      comparer: () => false,\n      options,\n    })\n    return false\n  }\n\n  compareIdentity(comparison, options)\n  // actual === expected, no need to compare prototype, properties, ...\n  if (!comparison.failed) return true\n  comparison.failed = false\n\n  comparePrototype(comparison, options)\n  if (comparison.failed) return false\n\n  compareIntegrity(comparison, options)\n  if (comparison.failed) return false\n\n  compareExtensibility(comparison, options)\n  if (comparison.failed) return false\n\n  comparePropertiesDescriptors(comparison, options)\n  if (comparison.failed) return false\n\n  compareProperties(comparison, options)\n  if (comparison.failed) return false\n\n  compareSymbolsDescriptors(comparison, options)\n  if (comparison.failed) return false\n\n  compareSymbols(comparison, options)\n  if (comparison.failed) return false\n\n  if (typeof Set === \"function\" && isSet(expected)) {\n    compareSetEntries(comparison, options)\n    if (comparison.failed) return false\n  }\n\n  if (typeof Map === \"function\" && isMap(expected)) {\n    compareMapEntries(comparison, options)\n    if (comparison.failed) return false\n  }\n\n  if (\"valueOf\" in expected && typeof expected.valueOf === \"function\") {\n    // always keep this one after properties because we must first ensure\n    // valueOf is on both actual and expected\n    // usefull because new Date(10).valueOf() === 10\n    // or new Boolean(true).valueOf() === true\n    compareValueOfReturnValue(comparison, options)\n    if (comparison.failed) return false\n  }\n\n  // required otherwise assert({ actual: /a/, expected: /b/ }) would not throw\n  if (isRegExp(expected)) {\n    compareToStringReturnValue(comparison, options)\n    if (comparison.failed) return false\n  }\n\n  return true\n}\n\nconst subcompare = (\n  comparison,\n  { type, data, actual, expected, comparer = defaultComparer, options },\n) => {\n  const subcomparison = createComparison({ type, data, actual, expected, parent: comparison })\n  comparison.children.push(subcomparison)\n  subcomparison.failed = !comparer(subcomparison, options)\n  comparison.failed = subcomparison.failed\n  return subcomparison\n}\n\nconst compareIdentity = (comparison, options) => {\n  const { actual, expected } = comparison\n  subcompare(comparison, {\n    type: \"identity\",\n    actual,\n    expected,\n    comparer: () => {\n      if (isNegativeZero(expected)) {\n        return isNegativeZero(actual)\n      }\n      if (isNegativeZero(actual)) {\n        return isNegativeZero(expected)\n      }\n      return actual === expected\n    },\n    options,\n  })\n}\n\n// under some rare and odd circumstances firefox Object.is(-0, -0)\n// returns false making test fail.\n// it is 100% reproductible with big.test.js.\n// However putting debugger or executing Object.is just before the\n// comparison prevent Object.is failure.\n// It makes me thing there is something strange inside firefox internals.\n// All this to say avoid relying on Object.is to test if the value is -0\nconst isNegativeZero = (value) => {\n  return typeof value === \"number\" && 1 / value === -Infinity\n}\n\nconst comparePrototype = (comparison, options) => {\n  subcompare(comparison, {\n    type: \"prototype\",\n    actual: Object.getPrototypeOf(comparison.actual),\n    expected: Object.getPrototypeOf(comparison.expected),\n    options,\n  })\n}\n\nconst compareExtensibility = (comparison, options) => {\n  subcompare(comparison, {\n    type: \"extensibility\",\n    actual: Object.isExtensible(comparison.actual) ? \"extensible\" : \"non-extensible\",\n    expected: Object.isExtensible(comparison.expected) ? \"extensible\" : \"non-extensible\",\n    comparer: ({ actual, expected }) => actual === expected,\n    options,\n  })\n}\n\n// https://tc39.github.io/ecma262/#sec-setintegritylevel\nconst compareIntegrity = (comparison, options) => {\n  subcompare(comparison, {\n    type: \"integrity\",\n    actual: getIntegriy(comparison.actual),\n    expected: getIntegriy(comparison.expected),\n    comparer: ({ actual, expected }) => actual === expected,\n    options,\n  })\n}\n\nconst getIntegriy = (value) => {\n  if (Object.isFrozen(value)) return \"frozen\"\n  if (Object.isSealed(value)) return \"sealed\"\n  return \"none\"\n}\n\nconst compareProperties = (comparison, options) => {\n  const { actual, expected } = comparison\n\n  const expectedPropertyNames = Object.getOwnPropertyNames(expected)\n  const actualPropertyNames = Object.getOwnPropertyNames(actual)\n  const actualMissing = expectedPropertyNames.filter(\n    (name) => actualPropertyNames.indexOf(name) === -1,\n  )\n  const actualExtra = actualPropertyNames.filter(\n    (name) => expectedPropertyNames.indexOf(name) === -1,\n  )\n  const expectedMissing = []\n  const expectedExtra = []\n\n  subcompare(comparison, {\n    type: \"properties\",\n    actual: { missing: actualMissing, extra: actualExtra },\n    expected: { missing: expectedMissing, extra: expectedExtra },\n    comparer: () => actualMissing.length === 0 && actualExtra.length === 0,\n    options,\n  })\n  if (comparison.failed) return\n\n  if (!options.anyOrder) {\n    const expectedKeys = Object.keys(expected)\n    const actualKeys = Object.keys(actual)\n    subcompare(comparison, {\n      type: \"properties-order\",\n      actual: actualKeys,\n      expected: expectedKeys,\n      comparer: () => expectedKeys.every((name, index) => name === actualKeys[index]),\n      options,\n    })\n  }\n}\n\nconst compareSymbols = (comparison, options) => {\n  const { actual, expected } = comparison\n\n  const expectedSymbols = Object.getOwnPropertySymbols(expected)\n  const actualSymbols = Object.getOwnPropertySymbols(actual)\n  const actualMissing = expectedSymbols.filter((symbol) => actualSymbols.indexOf(symbol) === -1)\n  const actualExtra = actualSymbols.filter((symbol) => expectedSymbols.indexOf(symbol) === -1)\n  const expectedMissing = []\n  const expectedExtra = []\n\n  subcompare(comparison, {\n    type: \"symbols\",\n    actual: { missing: actualMissing, extra: actualExtra },\n    expected: { missing: expectedMissing, extra: expectedExtra },\n    comparer: () => actualMissing.length === 0 && actualExtra.length === 0,\n    options,\n  })\n  if (comparison.failed) return\n\n  if (!options.anyOrder) {\n    subcompare(comparison, {\n      type: \"symbols-order\",\n      actual: actualSymbols,\n      expected: expectedSymbols,\n      comparer: () => expectedSymbols.every((symbol, index) => symbol === actualSymbols[index]),\n      options,\n    })\n  }\n}\n\nconst comparePropertiesDescriptors = (comparison, options) => {\n  const { expected } = comparison\n  const expectedPropertyNames = Object.getOwnPropertyNames(expected)\n  // eslint-disable-next-line no-unused-vars\n  for (const expectedPropertyName of expectedPropertyNames) {\n    comparePropertyDescriptor(comparison, expectedPropertyName, expected, options)\n    if (comparison.failed) break\n  }\n}\n\nconst compareSymbolsDescriptors = (comparison, options) => {\n  const { expected } = comparison\n  const expectedSymbols = Object.getOwnPropertySymbols(expected)\n  // eslint-disable-next-line no-unused-vars\n  for (const expectedSymbol of expectedSymbols) {\n    comparePropertyDescriptor(comparison, expectedSymbol, expected, options)\n    if (comparison.failed) break\n  }\n}\n\nconst comparePropertyDescriptor = (comparison, property, owner, options) => {\n  const { actual, expected } = comparison\n\n  const expectedDescriptor = Object.getOwnPropertyDescriptor(expected, property)\n  const actualDescriptor = Object.getOwnPropertyDescriptor(actual, property)\n  if (!actualDescriptor) return\n\n  const configurableComparison = subcompare(comparison, {\n    type: \"property-configurable\",\n    data: property,\n    actual: actualDescriptor.configurable ? \"configurable\" : \"non-configurable\",\n    expected: expectedDescriptor.configurable ? \"configurable\" : \"non-configurable\",\n    comparer: ({ actual, expected }) => actual === expected,\n    options,\n  })\n  if (configurableComparison.failed) return\n\n  const enumerableComparison = subcompare(comparison, {\n    type: \"property-enumerable\",\n    data: property,\n    actual: actualDescriptor.enumerable ? \"enumerable\" : \"non-enumerable\",\n    expected: expectedDescriptor.enumerable ? \"enumerable\" : \"non-enumerable\",\n    comparer: ({ actual, expected }) => actual === expected,\n    options,\n  })\n  if (enumerableComparison.failed) return\n\n  const writableComparison = subcompare(comparison, {\n    type: \"property-writable\",\n    data: property,\n    actual: actualDescriptor.writable ? \"writable\" : \"non-writable\",\n    expected: expectedDescriptor.writable ? \"writable\" : \"non-writable\",\n    comparer: ({ actual, expected }) => actual === expected,\n    options,\n  })\n  if (writableComparison.failed) return\n\n  if (isError(owner) && isErrorPropertyIgnored(property)) {\n    return\n  }\n\n  if (typeof owner === \"function\") {\n    if (owner.name === \"RegExp\" && isRegExpPropertyIgnored(property)) {\n      return\n    }\n    if (isFunctionPropertyIgnored(property)) {\n      return\n    }\n  }\n\n  const getComparison = subcompare(comparison, {\n    type: \"property-get\",\n    data: property,\n    actual: actualDescriptor.get,\n    expected: expectedDescriptor.get,\n    options,\n  })\n  if (getComparison.failed) return\n\n  const setComparison = subcompare(comparison, {\n    type: \"property-set\",\n    data: property,\n    actual: actualDescriptor.set,\n    expected: expectedDescriptor.set,\n    options,\n  })\n  if (setComparison.failed) return\n\n  const valueComparison = subcompare(comparison, {\n    type: \"property-value\",\n    data: isArray(expected) ? propertyToArrayIndex(property) : property,\n    actual: actualDescriptor.value,\n    expected: expectedDescriptor.value,\n    options,\n  })\n  if (valueComparison.failed) return\n}\n\nconst isRegExpPropertyIgnored = (name) => RegExpIgnoredProperties.includes(name)\n\nconst isFunctionPropertyIgnored = (name) => functionIgnoredProperties.includes(name)\n\nconst isErrorPropertyIgnored = (name) => errorIgnoredProperties.includes(name)\n\n// some regexp properties fails the comparison but that's expected\n// to my experience it happens only in webkit.\n// check https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/RegExp/input\n// to see why these properties exists and would fail between each regex instance\nconst RegExpIgnoredProperties = [\n  \"input\",\n  \"$_\",\n  \"lastMatch\",\n  \"$&\",\n  \"lastParen\",\n  \"$+\",\n  \"leftContext\",\n  \"$`\",\n  \"rightContext\",\n  \"$'\",\n]\n\nconst functionIgnoredProperties = [\n  // function caller would fail comparison but that's expected\n  \"caller\",\n  // function arguments would fail comparison but that's expected\n  \"arguments\",\n]\n\nconst errorIgnoredProperties = [\n  // stack fails comparison but it's not important\n  \"stack\",\n  // firefox properties that would fail comparison but that's expected\n  \"file\",\n  \"fileName\",\n  \"lineNumber\",\n  \"columnNumber\",\n  // webkit properties that would fail comparison but that's expected\n  \"line\",\n  \"column\",\n]\n\nconst propertyToArrayIndex = (property) => {\n  if (typeof property !== \"string\") return property\n  const propertyAsNumber = parseInt(property, 10)\n  if (Number.isInteger(propertyAsNumber) && propertyAsNumber >= 0) {\n    return propertyAsNumber\n  }\n  return property\n}\n\nconst compareSetEntries = (comparison, options) => {\n  const { actual, expected } = comparison\n\n  const expectedEntries = Array.from(expected.values()).map((value, index) => {\n    return { index, value }\n  })\n  const actualEntries = Array.from(actual.values()).map((value, index) => {\n    return { index, value }\n  })\n\n  // first check actual entries match expected entries\n  // eslint-disable-next-line no-unused-vars\n  for (const actualEntry of actualEntries) {\n    const expectedEntry = expectedEntries[actualEntry.index]\n    if (expectedEntry) {\n      const entryComparison = subcompare(comparison, {\n        type: \"set-entry\",\n        data: actualEntry.index,\n        actual: actualEntry.value,\n        expected: expectedEntry.value,\n        options,\n      })\n      if (entryComparison.failed) return\n    }\n  }\n\n  const actualSize = actual.size\n  const expectedSize = expected.size\n  const sizeComparison = subcompare(comparison, {\n    type: \"set-size\",\n    actual: actualSize,\n    expected: expectedSize,\n    comparer: () => actualSize === expectedSize,\n    options,\n  })\n  if (sizeComparison.failed) return\n}\n\nconst compareMapEntries = (comparison, options) => {\n  const { actual, expected } = comparison\n\n  const actualEntries = Array.from(actual.keys()).map((key) => {\n    return { key, value: actual.get(key) }\n  })\n  const expectedEntries = Array.from(expected.keys()).map((key) => {\n    return { key, value: expected.get(key) }\n  })\n\n  const entryMapping = []\n  const expectedEntryCandidates = expectedEntries.slice()\n\n  actualEntries.forEach((actualEntry) => {\n    const expectedEntry = expectedEntryCandidates.find((expectedEntryCandidate) => {\n      const mappingComparison = subcompare(comparison, {\n        type: \"map-entry-key-mapping\",\n        actual: actualEntry.key,\n        expected: expectedEntryCandidate.key,\n        options,\n      })\n      if (mappingComparison.failed) {\n        comparison.failed = false\n        return false\n      }\n      return true\n    })\n    if (expectedEntry)\n      expectedEntryCandidates.splice(expectedEntryCandidates.indexOf(expectedEntry), 1)\n    entryMapping.push({ actualEntry, expectedEntry })\n  })\n\n  // should we ensure entries are defined in the same order ?\n  // I'm not sure about that, but maybe.\n  // in that case, just like for properties order\n  // this is the last thing we would check\n  // because it gives less information\n\n  // first check all actual entry macthes expected entry\n  let index = 0\n  // eslint-disable-next-line no-unused-vars\n  for (const actualEntry of actualEntries) {\n    const actualEntryMapping = entryMapping.find((mapping) => mapping.actualEntry === actualEntry)\n    if (actualEntryMapping && actualEntryMapping.expectedEntry) {\n      const mapEntryComparison = subcompare(comparison, {\n        type: \"map-entry\",\n        data: index,\n        actual: actualEntry,\n        expected: actualEntryMapping.expectedEntry,\n        options,\n      })\n      if (mapEntryComparison.failed) return\n    }\n    index++\n  }\n\n  // second check there is no unexpected entry\n  const mappingWithoutExpectedEntry = entryMapping.find(\n    (mapping) => mapping.expectedEntry === undefined,\n  )\n  const unexpectedEntry = mappingWithoutExpectedEntry\n    ? mappingWithoutExpectedEntry.actualEntry\n    : null\n  const unexpectedEntryComparison = subcompare(comparison, {\n    type: \"map-entry\",\n    actual: unexpectedEntry,\n    expected: null,\n    options,\n  })\n  if (unexpectedEntryComparison.failed) return\n\n  // third check there is no missing entry (expected but not found)\n  const expectedEntryWithoutActualEntry = expectedEntries.find((expectedEntry) =>\n    entryMapping.every((mapping) => mapping.expectedEntry !== expectedEntry),\n  )\n  const missingEntry = expectedEntryWithoutActualEntry || null\n  const missingEntryComparison = subcompare(comparison, {\n    type: \"map-entry\",\n    actual: null,\n    expected: missingEntry,\n    options,\n  })\n  if (missingEntryComparison.failed) return\n}\n\nconst compareValueOfReturnValue = (comparison, options) => {\n  subcompare(comparison, {\n    type: \"value-of-return-value\",\n    actual: comparison.actual.valueOf(),\n    expected: comparison.expected.valueOf(),\n    options,\n  })\n}\n\nconst compareToStringReturnValue = (comparison, options) => {\n  subcompare(comparison, {\n    type: \"to-string-return-value\",\n    actual: comparison.actual.toString(),\n    expected: comparison.expected.toString(),\n    options,\n  })\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { propertyToAccessorString } from \"./propertyToAccessorString.js\"\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols\nexport const symbolToWellKnownSymbol = (symbol) => {\n  const wellKnownSymbolName = Object.getOwnPropertyNames(Symbol).find(\n    (name) => symbol === Symbol[name],\n  )\n  if (wellKnownSymbolName) {\n    return `Symbol${propertyToAccessorString(wellKnownSymbolName)}`\n  }\n\n  const description = symbolToDescription(symbol)\n  if (description) {\n    const key = Symbol.keyFor(symbol)\n    if (key) {\n      return `Symbol.for(${inspect(description)})`\n    }\n    return `Symbol(${inspect(description)})`\n  }\n  return `Symbol()`\n}\n\nconst symbolToDescription = (symbol) => {\n  const toStringResult = symbol.toString()\n  const openingParenthesisIndex = toStringResult.indexOf(\"(\")\n  const closingParenthesisIndex = toStringResult.indexOf(\")\")\n  return toStringResult.slice(openingParenthesisIndex + 1, closingParenthesisIndex)\n  // return symbol.description // does not work on node\n}\n",
    "export const propertyNameToDotNotationAllowed = (propertyName) => {\n  return /^[a-z_$]+[0-9a-z_&]$/i.test(propertyName) || /^[a-z_$]$/i.test(propertyName)\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { symbolToWellKnownSymbol } from \"./symbolToWellKnownSymbol.js\"\nimport { propertyNameToDotNotationAllowed } from \"./propertyNameToDotNotationAllowed.js\"\n\nexport const propertyToAccessorString = (property) => {\n  if (typeof property === \"number\") {\n    return `[${inspect(property)}]`\n  }\n  if (typeof property === \"string\") {\n    const dotNotationAllowedForProperty = propertyNameToDotNotationAllowed(property)\n    if (dotNotationAllowedForProperty) {\n      return `.${property}`\n    }\n    return `[${inspect(property)}]`\n  }\n\n  return `[${symbolToWellKnownSymbol(property)}]`\n}\n",
    "/* eslint-disable no-use-before-define */\nimport { propertyToAccessorString } from \"./propertyToAccessorString.js\"\n\nexport const comparisonToPath = (comparison, name = \"value\") => {\n  const comparisonPath = []\n\n  let ancestor = comparison.parent\n  while (ancestor && ancestor.type !== \"root\") {\n    comparisonPath.unshift(ancestor)\n    ancestor = ancestor.parent\n  }\n  if (comparison.type !== \"root\") {\n    comparisonPath.push(comparison)\n  }\n\n  const path = comparisonPath.reduce((previous, { type, data }) => {\n    if (type === \"property-enumerable\") {\n      return `${previous}${propertyToAccessorString(data)}[[Enumerable]]`\n    }\n    if (type === \"property-configurable\") {\n      return `${previous}${propertyToAccessorString(data)}[[Configurable]]`\n    }\n    if (type === \"property-writable\") {\n      return `${previous}${propertyToAccessorString(data)}[[Writable]]`\n    }\n    if (type === \"property-get\") {\n      return `${previous}${propertyToAccessorString(data)}[[Get]]`\n    }\n    if (type === \"property-set\") {\n      return `${previous}${propertyToAccessorString(data)}[[Set]]`\n    }\n    if (type === \"property-value\") {\n      return `${previous}${propertyToAccessorString(data)}`\n    }\n    if (type === \"map-entry\") {\n      return `${previous}[[mapEntry:${data}]]`\n    }\n    if (type === \"set-entry\") {\n      return `${previous}[[setEntry:${data}]]`\n    }\n    if (type === \"reference\") {\n      return `${previous}`\n    }\n    if (type === \"integrity\") {\n      return `${previous}[[Integrity]]`\n    }\n    if (type === \"extensibility\") {\n      return `${previous}[[Extensible]]`\n    }\n    if (type === \"prototype\") {\n      return `${previous}[[Prototype]]`\n    }\n    if (type === \"properties\") {\n      return `${previous}`\n    }\n    if (type === \"properties-order\") {\n      return `${previous}`\n    }\n    if (type === \"symbols\") {\n      return `${previous}`\n    }\n    if (type === \"symbols-order\") {\n      return `${previous}`\n    }\n    if (type === \"to-string-return-value\") {\n      return `${previous}.toString()`\n    }\n    if (type === \"value-of-return-value\") {\n      return `${previous}.valueOf()`\n    }\n    if (type === \"identity\" || type === \"not\") {\n      return previous\n    }\n    if (type === \"any\") {\n      return previous\n    }\n    return `${previous} type:${type}, data:${data}`\n  }, name)\n\n  return path\n}\n",
    "/* eslint-disable no-use-before-define */\nimport { isComposite } from \"./isComposite.js\"\nimport { propertyToAccessorString } from \"./propertyToAccessorString.js\"\n\nexport const valueToWellKnown = (value) => {\n  const compositeWellKnownPath = valueToCompositeWellKnownPath(value)\n  if (compositeWellKnownPath) {\n    return compositeWellKnownPath\n      .slice(1)\n      .reduce(\n        (previous, property) => `${previous}${propertyToAccessorString(property)}`,\n        compositeWellKnownPath[0],\n      )\n  }\n  return null\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\nconst compositeWellKnownMap = new WeakMap()\nconst primitiveWellKnownMap = new Map()\n\nconst valueToCompositeWellKnownPath = (value) => {\n  return compositeWellKnownMap.get(value)\n}\n\nconst isPrimitive = (value) => !isComposite(value)\n\nexport const addWellKnownComposite = (value, name) => {\n  const visitValue = (value, path) => {\n    if (isPrimitive(value)) {\n      primitiveWellKnownMap.set(value, path)\n      return\n    }\n\n    if (compositeWellKnownMap.has(value)) return // prevent infinite recursion\n    compositeWellKnownMap.set(value, path)\n\n    const visitProperty = (property) => {\n      let descriptor\n      try {\n        descriptor = Object.getOwnPropertyDescriptor(value, property)\n      } catch (e) {\n        // may happen if you try to access some iframe properties or stuff like that\n        if (e.name === \"SecurityError\") {\n          return\n        }\n        throw e\n      }\n\n      if (!descriptor) {\n        return\n      }\n\n      // do not trigger getter/setter\n      if (\"value\" in descriptor) {\n        const propertyValue = descriptor.value\n        visitValue(propertyValue, [...path, property])\n      }\n    }\n\n    Object.getOwnPropertyNames(value).forEach((name) => visitProperty(name))\n    Object.getOwnPropertySymbols(value).forEach((symbol) => visitProperty(symbol))\n  }\n\n  visitValue(value, [name])\n}\n\nif (typeof global === \"object\") {\n  addWellKnownComposite(global, \"global\")\n}\nif (typeof window === \"object\") {\n  addWellKnownComposite(window, \"window\")\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { valueToWellKnown } from \"./wellKnownValue.js\"\n\nexport const valueToString = (value) => {\n  return valueToWellKnown(value) || inspect(value)\n}\n",
    "import { comparisonToPath } from \"../comparisonToPath.js\"\nimport { valueToString } from \"../valueToString.js\"\n\nexport const anyComparisonToErrorMessage = (comparison) => {\n  if (comparison.type !== \"any\") return undefined\n\n  const path = comparisonToPath(comparison)\n  const actualValue = valueToString(comparison.actual)\n  const expectedConstructor = comparison.expected\n\n  return createAnyMessage({ path, expectedConstructor, actualValue })\n}\n\nconst createAnyMessage = ({ path, expectedConstructor, actualValue }) => `unexpected value.\n--- found ---\n${actualValue}\n--- expected ---\nany(${expectedConstructor.name})\n--- at ---\n${path}`\n",
    "import { comparisonToPath } from \"../comparisonToPath.js\"\nimport { valueToString } from \"../valueToString.js\"\n\nexport const defaultComparisonToErrorMessage = (comparison) => {\n  const path = comparisonToPath(comparison)\n  const expectedValue = valueToString(comparison.expected)\n  const actualValue = valueToString(comparison.actual)\n\n  return createUnequalValuesMessage({ path, expectedValue, actualValue })\n}\n\nconst createUnequalValuesMessage = ({ path, expectedValue, actualValue }) => `unequal values.\n--- found ---\n${actualValue}\n--- expected ---\n${expectedValue}\n--- at ---\n${path}`\n",
    "import { comparisonToPath } from \"../comparisonToPath.js\"\nimport { valueToString } from \"../valueToString.js\"\n\nexport const referenceComparisonToErrorMessage = (comparison) => {\n  if (comparison.type !== \"reference\") return undefined\n\n  const { actual, expected } = comparison\n  const isMissing = expected && !actual\n  const isExtra = !expected && actual\n  const path = comparisonToPath(comparison)\n\n  if (isExtra) {\n    return createUnexpectedReferenceMessage({\n      path,\n      expectedValue: valueToString(comparison.parent.expected),\n      unexpectedReferencePath: comparisonToPath(actual, \"actual\"),\n    })\n  }\n\n  if (isMissing) {\n    return createMissingReferenceMessage({\n      path,\n      expectedReferencePath: comparisonToPath(expected, \"expected\"),\n      actualValue: valueToString(comparison.parent.actual),\n    })\n  }\n\n  return createUnequalRefencesMessage({\n    path,\n    expectedReferencePath: comparisonToPath(expected, \"expected\"),\n    actualReferencePath: comparisonToPath(actual, \"actual\"),\n  })\n}\n\nconst createUnexpectedReferenceMessage = ({\n  path,\n  expectedValue,\n  unexpectedReferencePath,\n}) => `found a reference instead of a value.\n--- reference found to ---\n${unexpectedReferencePath}\n--- value expected ---\n${expectedValue}\n--- at ---\n${path}`\n\nconst createMissingReferenceMessage = ({\n  path,\n  expectedReferencePath,\n  actualValue,\n}) => `found a value instead of a reference.\n--- value found ---\n${actualValue}\n--- reference expected to ---\n${expectedReferencePath}\n--- at ---\n${path}`\n\nconst createUnequalRefencesMessage = ({\n  path,\n  expectedReferencePath,\n  actualReferencePath,\n}) => `unequal references.\n--- reference found to ---\n${actualReferencePath}\n--- reference expected to ---\n${expectedReferencePath}\n--- at ---\n${path}`\n",
    "export const comparisonToRootComparison = (comparison) => {\n  let current = comparison\n  while (current) {\n    if (current.parent) {\n      current = current.parent\n    } else {\n      break\n    }\n  }\n  return current\n}\n",
    "export const findSelfOrAncestorComparison = (comparison, predicate) => {\n  let current = comparison\n  let foundComparison\n  while (current) {\n    if (current && predicate(current)) {\n      foundComparison = current\n      current = foundComparison.parent\n      while (current) {\n        if (predicate(current)) foundComparison = current\n        current = current.parent\n      }\n      return foundComparison\n    }\n    current = current.parent\n  }\n  return null\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { comparisonToPath } from \"../comparisonToPath.js\"\nimport { valueToWellKnown } from \"../wellKnownValue.js\"\nimport { comparisonToRootComparison } from \"../comparisonToRootComparison.js\"\nimport { findSelfOrAncestorComparison } from \"../findSelfOrAncestorComparison.js\"\n\nexport const prototypeComparisonToErrorMessage = (comparison) => {\n  const prototypeComparison = findSelfOrAncestorComparison(\n    comparison,\n    ({ type }) => type === \"prototype\",\n  )\n  if (!prototypeComparison) return null\n\n  const rootComparison = comparisonToRootComparison(comparison)\n  const path = comparisonToPath(prototypeComparison)\n  const prototypeToString = (prototype) => {\n    const wellKnown = valueToWellKnown(prototype)\n    if (wellKnown) return wellKnown\n    // we could check in the whole comparison tree, not only for actual/expected\n    // but any reference to that prototype\n    // to have a better name for it\n    // if anything refer to it except himself\n    // it would be a better name for that object no ?\n    if (prototype === rootComparison.expected) return \"expected\"\n    if (prototype === rootComparison.actual) return \"actual\"\n    return inspect(prototype)\n  }\n  const expectedPrototype = prototypeComparison.expected\n  const actualPrototype = prototypeComparison.actual\n\n  return createUnequalPrototypesMessage({\n    path,\n    expectedPrototype: prototypeToString(expectedPrototype),\n    actualPrototype: prototypeToString(actualPrototype),\n  })\n}\n\nconst createUnequalPrototypesMessage = ({\n  path,\n  expectedPrototype,\n  actualPrototype,\n}) => `unequal prototypes.\n--- prototype found ---\n${actualPrototype}\n--- prototype expected ---\n${expectedPrototype}\n--- at ---\n${path}`\n",
    "export const createDetailedMessage = (message, details = {}) => {\n  let string = `${message}`\n\n  Object.keys(details).forEach((key) => {\n    const value = details[key]\n    string += `\n--- ${key} ---\n${\n  Array.isArray(value)\n    ? value.join(`\n`)\n    : value\n}`\n  })\n\n  return string\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { createDetailedMessage } from \"./createDetailedMessage.js\"\nimport { comparisonToPath } from \"../comparisonToPath.js\"\n\nexport const propertiesComparisonToErrorMessage = (comparison) => {\n  if (comparison.type !== \"properties\") return undefined\n\n  const path = comparisonToPath(comparison.parent)\n  const missing = comparison.actual.missing\n  const extra = comparison.actual.extra\n  const missingCount = missing.length\n  const extraCount = extra.length\n  const unexpectedProperties = {}\n  extra.forEach((propertyName) => {\n    unexpectedProperties[propertyName] = comparison.parent.actual[propertyName]\n  })\n  const missingProperties = {}\n  missing.forEach((propertyName) => {\n    missingProperties[propertyName] = comparison.parent.expected[propertyName]\n  })\n\n  if (missingCount === 1 && extraCount === 0) {\n    return createDetailedMessage(\"1 missing property.\", {\n      \"missing property\": inspect(missingProperties),\n      \"at\": path,\n    })\n  }\n\n  if (missingCount > 1 && extraCount === 0) {\n    return createDetailedMessage(`${missing} missing properties.`, {\n      \"missing properties\": inspect(unexpectedProperties),\n      \"at\": path,\n    })\n  }\n\n  if (missingCount === 0 && extraCount === 1) {\n    return createDetailedMessage(`1 unexpected property.`, {\n      \"unexpected property\": inspect(unexpectedProperties),\n      \"at\": path,\n    })\n  }\n\n  if (missingCount === 0 && extraCount > 1) {\n    return createDetailedMessage(`${extraCount} unexpected properties.`, {\n      \"unexpected properties\": inspect(unexpectedProperties),\n      \"at\": path,\n    })\n  }\n\n  let message = \"\"\n  if (missingCount === 1) {\n    message += `1 missing property`\n  } else {\n    message += `${missingCount} missing properties`\n  }\n  if (extraCount === 1) {\n    message += ` and 1 unexpected property.`\n  } else {\n    message += ` and ${extraCount} unexpected properties.`\n  }\n  return createDetailedMessage(message, {\n    [missingCount === 1 ? \"missing property\" : \"missing properties\"]: inspect(missingProperties),\n    [extraCount === 1 ? \"unexpected property\" : \"unexpected properties\"]: inspect(\n      unexpectedProperties,\n    ),\n    at: path,\n  })\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { comparisonToPath } from \"../comparisonToPath.js\"\n\nexport const propertiesOrderComparisonToErrorMessage = (comparison) => {\n  if (comparison.type !== \"properties-order\") return undefined\n\n  const path = comparisonToPath(comparison)\n  const expected = comparison.expected\n  const actual = comparison.actual\n\n  return createUnexpectedPropertiesOrderMessage({\n    path,\n    expectedPropertiesOrder: propertyNameArrayToString(expected),\n    actualPropertiesOrder: propertyNameArrayToString(actual),\n  })\n}\n\nconst createUnexpectedPropertiesOrderMessage = ({\n  path,\n  expectedPropertiesOrder,\n  actualPropertiesOrder,\n}) => `unexpected properties order.\n--- properties order found ---\n${actualPropertiesOrder.join(`\n`)}\n--- properties order expected ---\n${expectedPropertiesOrder.join(`\n`)}\n--- at ---\n${path}`\n\nconst propertyNameArrayToString = (propertyNameArray) => {\n  return propertyNameArray.map((propertyName) => inspect(propertyName))\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { comparisonToPath } from \"../comparisonToPath.js\"\n\nexport const symbolsComparisonToErrorMessage = (comparison) => {\n  if (comparison.type !== \"symbols\") return undefined\n\n  const path = comparisonToPath(comparison)\n  const extra = comparison.actual.extra\n  const missing = comparison.actual.missing\n  const hasExtra = extra.length > 0\n  const hasMissing = missing.length > 0\n\n  if (hasExtra && !hasMissing) {\n    return createUnexpectedSymbolsMessage({ path, unexpectedSymbols: symbolArrayToString(extra) })\n  }\n\n  if (!hasExtra && hasMissing) {\n    return createMissingSymbolsMessage({ path, missingSymbols: symbolArrayToString(missing) })\n  }\n\n  return createUnexpectedAndMissingSymbolsMessage({\n    path,\n    unexpectedSymbols: symbolArrayToString(extra),\n    missingSymbols: symbolArrayToString(missing),\n  })\n}\n\nconst createUnexpectedSymbolsMessage = ({ path, unexpectedSymbols }) => `unexpected symbols.\n--- unexpected symbol list ---\n${unexpectedSymbols.join(`\n`)}\n--- at ---\n${path}`\n\nconst createMissingSymbolsMessage = ({ path, missingSymbols }) => `missing symbols.\n--- missing symbol list ---\n${missingSymbols.join(`\n`)}\n--- at ---\n${path}`\n\nconst createUnexpectedAndMissingSymbolsMessage = ({\n  path,\n  unexpectedSymbols,\n  missingSymbols,\n}) => `unexpected and missing symbols.\n--- unexpected symbol list ---\n${unexpectedSymbols.join(`\n`)}\n--- missing symbol list ---\n${missingSymbols.join(`\n`)}\n--- at ---\n${path}`\n\nconst symbolArrayToString = (symbolArray) => {\n  return symbolArray.map((symbol) => inspect(symbol))\n}\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { comparisonToPath } from \"../comparisonToPath.js\"\n\nexport const symbolsOrderComparisonToErrorMessage = (comparison) => {\n  if (comparison.type !== \"symbols-order\") return undefined\n\n  const path = comparisonToPath(comparison)\n  const expected = comparison.expected\n  const actual = comparison.actual\n\n  return createUnexpectedSymbolsOrderMessage({\n    path,\n    expectedSymbolsOrder: symbolArrayToString(expected),\n    actualSymbolsOrder: symbolArrayToString(actual),\n  })\n}\n\nconst createUnexpectedSymbolsOrderMessage = ({\n  path,\n  expectedSymbolsOrder,\n  actualSymbolsOrder,\n}) => `unexpected symbols order.\n--- symbols order found ---\n${actualSymbolsOrder.join(`\n`)}\n--- symbols order expected ---\n${expectedSymbolsOrder.join(`\n`)}\n--- at ---\n${path}`\n\nconst symbolArrayToString = (symbolArray) => {\n  return symbolArray.map((symbol) => inspect(symbol))\n}\n",
    "import { comparisonToPath } from \"../comparisonToPath.js\"\n\nexport const setSizeComparisonToMessage = (comparison) => {\n  if (comparison.type !== \"set-size\") return undefined\n\n  if (comparison.actual > comparison.expected) return createBiggerThanExpectedMessage(comparison)\n\n  return createSmallerThanExpectedMessage(comparison)\n}\n\nconst createBiggerThanExpectedMessage = (comparison) => `a set is bigger than expected.\n--- set size found ---\n${comparison.actual}\n--- set size expected ---\n${comparison.expected}\n--- at ---\n${comparisonToPath(comparison.parent)}`\n\nconst createSmallerThanExpectedMessage = (comparison) => `a set is smaller than expected.\n--- set size found ---\n${comparison.actual}\n--- set size expected ---\n${comparison.expected}\n--- at ---\n${comparisonToPath(comparison.parent)}`\n",
    "import { comparisonToPath } from \"../comparisonToPath.js\"\nimport { valueToString } from \"../valueToString.js\"\nimport { findSelfOrAncestorComparison } from \"../findSelfOrAncestorComparison.js\"\n\nexport const mapEntryComparisonToErrorMessage = (comparison) => {\n  const mapEntryComparison = findSelfOrAncestorComparison(\n    comparison,\n    ({ type }) => type === \"map-entry\",\n  )\n  if (!mapEntryComparison) return null\n\n  const isUnexpected = !mapEntryComparison.expected && mapEntryComparison.actual\n  if (isUnexpected) return createUnexpectedMapEntryErrorMessage(mapEntryComparison)\n\n  const isMissing = mapEntryComparison.expected && !mapEntryComparison.actual\n  if (isMissing) return createMissingMapEntryErrorMessage(mapEntryComparison)\n\n  return null\n}\n\nconst createUnexpectedMapEntryErrorMessage = (comparison) => `an entry is unexpected.\n--- unexpected entry key ---\n${valueToString(comparison.actual.key)}\n--- unexpected entry value ---\n${valueToString(comparison.actual.value)}\n--- at ---\n${comparisonToPath(comparison.parent)}`\n\nconst createMissingMapEntryErrorMessage = (comparison) => `an entry is missing.\n--- missing entry key ---\n${valueToString(comparison.expected.key)}\n--- missing entry value ---\n${valueToString(comparison.expected.value)}\n--- at ---\n${comparisonToPath(comparison.parent)}`\n",
    "import { comparisonToPath } from \"../comparisonToPath.js\"\nimport { valueToString } from \"../valueToString.js\"\n\nexport const notComparisonToErrorMessage = (comparison) => {\n  if (comparison.type !== \"not\") return undefined\n\n  const path = comparisonToPath(comparison)\n  const actualValue = valueToString(comparison.actual)\n\n  return createNotMessage({ path, actualValue })\n}\n\nconst createNotMessage = ({ path, actualValue }) => `unexpected value.\n--- found ---\n${actualValue}\n--- expected ---\nan other value\n--- at ---\n${path}`\n",
    "import { inspect } from \"@jsenv/inspect\"\nimport { comparisonToPath } from \"../comparisonToPath.js\"\nimport { createDetailedMessage } from \"./createDetailedMessage.js\"\nimport { isArray } from \"../object-subtype.js\"\n\nexport const arrayLengthComparisonToMessage = (comparison) => {\n  if (comparison.type !== \"identity\") return undefined\n  const parentComparison = comparison.parent\n  if (parentComparison.type !== \"property-value\") return undefined\n  if (parentComparison.data !== \"length\") return undefined\n  const grandParentComparison = parentComparison.parent\n  if (!isArray(grandParentComparison.actual)) return undefined\n\n  const actualArray = grandParentComparison.actual\n  const expectedArray = grandParentComparison.expected\n  const actualLength = comparison.actual\n  const expectedLength = comparison.expected\n  const path = comparisonToPath(grandParentComparison)\n\n  if (actualLength < expectedLength) {\n    const missingValues = expectedArray.slice(actualLength)\n\n    return createDetailedMessage(`an array is smaller than expected.`, {\n      \"array length found\": actualLength,\n      \"array length expected\": expectedLength,\n      \"missing values\": inspect(missingValues),\n      \"at\": path,\n    })\n  }\n\n  const extraValues = actualArray.slice(expectedLength)\n  return createDetailedMessage(`an array is bigger than expected.`, {\n    \"array length found\": actualLength,\n    \"array length expected\": expectedLength,\n    \"extra values\": inspect(extraValues),\n    \"at\": path,\n  })\n}\n",
    "/* eslint-disable import/max-dependencies */\nimport { anyComparisonToErrorMessage } from \"./anyComparisonToErrorMessage.js\"\nimport { defaultComparisonToErrorMessage } from \"./defaultComparisonToErrorMessage.js\"\nimport { referenceComparisonToErrorMessage } from \"./referenceComparisonToErrorMessage.js\"\nimport { prototypeComparisonToErrorMessage } from \"./prototypeComparisonToErrorMessage.js\"\nimport { propertiesComparisonToErrorMessage } from \"./propertiesComparisonToErrorMessage.js\"\nimport { propertiesOrderComparisonToErrorMessage } from \"./propertiesOrderComparisonToErrorMessage.js\"\nimport { symbolsComparisonToErrorMessage } from \"./symbolsComparisonToErrorMessage.js\"\nimport { symbolsOrderComparisonToErrorMessage } from \"./symbolsOrderComparisonToErrorMessage.js\"\nimport { setSizeComparisonToMessage } from \"./setSizeComparisonToMessage.js\"\nimport { mapEntryComparisonToErrorMessage } from \"./mapEntryComparisonToErrorMessage.js\"\nimport { notComparisonToErrorMessage } from \"./notComparisonToErrorMessage.js\"\nimport { arrayLengthComparisonToMessage } from \"./arrayLengthComparisonToMessage.js\"\n\nexport const comparisonToErrorMessage = (comparison) => {\n  const failedComparison = deepestComparison(comparison)\n  return (\n    firstFunctionReturningSomething(\n      [\n        anyComparisonToErrorMessage,\n        mapEntryComparisonToErrorMessage,\n        notComparisonToErrorMessage,\n        prototypeComparisonToErrorMessage,\n        referenceComparisonToErrorMessage,\n        propertiesComparisonToErrorMessage,\n        propertiesOrderComparisonToErrorMessage,\n        symbolsComparisonToErrorMessage,\n        symbolsOrderComparisonToErrorMessage,\n        setSizeComparisonToMessage,\n        arrayLengthComparisonToMessage,\n      ],\n      failedComparison,\n    ) || defaultComparisonToErrorMessage(failedComparison)\n  )\n}\n\nconst deepestComparison = (comparison) => {\n  let current = comparison\n\n  while (current) {\n    const { children } = current\n    if (children.length === 0) break\n    current = children[children.length - 1]\n  }\n\n  return current\n}\n\nconst firstFunctionReturningSomething = (fns, ...args) => {\n  let i = 0\n  while (i < fns.length) {\n    const fn = fns[i]\n    const returnValue = fn(...args)\n    if (returnValue !== null && returnValue !== undefined) return returnValue\n    i++\n  }\n  return undefined\n}\n",
    "export const isAssertionError = (value) =>\n  value && typeof value === \"object\" && value.name === \"AssertionError\"\n\nexport const createAssertionError = (message) => {\n  const error = new Error(message)\n  error.name = \"AssertionError\"\n  return error\n}\n",
    "/* eslint-disable no-use-before-define */\nimport { compare, createNotExpectation, createAnyExpectation } from \"./internal/compare.js\"\nimport { comparisonToErrorMessage } from \"./internal/toErrorMessage/comparisonToErrorMessage.js\"\nimport { createAssertionError } from \"./assertionError.js\"\n\nexport const assert = (...args) => {\n  if (args.length === 0) {\n    throw new Error(`assert must be called with { actual, expected }, missing first argument`)\n  }\n\n  if (args.length > 1) {\n    throw new Error(`assert must be called with { actual, expected }, received too much arguments`)\n  }\n\n  const firstArg = args[0]\n  if (typeof firstArg !== \"object\" || firstArg === null) {\n    throw new Error(\n      `assert must be called with { actual, expected }, received ${firstArg} as first argument instead of object`,\n    )\n  }\n\n  if (\"actual\" in firstArg === false) {\n    throw new Error(\n      `assert must be called with { actual, expected }, missing actual property on first argument`,\n    )\n  }\n\n  if (\"expected\" in firstArg === false) {\n    throw new Error(\n      `assert must be called with { actual, expected }, missing expected property on first argument`,\n    )\n  }\n\n  return _assert(...args)\n}\n\nassert.not = (value) => {\n  return createNotExpectation(value)\n}\n\nassert.any = (Constructor) => {\n  return createAnyExpectation(Constructor)\n}\n\n/*\n * anyOrder is not documented because ../readme.md#Why-opinionated-\n * but I feel like the property order comparison might be too strict\n * and if we cannot find a proper alternative, being able to disable it\n * might be useful\n *\n * Documentation suggest to take the object and reorder manually\n *\n * const value = { bar: true, foo: true }\n * const actual = { foo: value.foo, bar: value.bar }\n * const expected = { foo: true, bar: true }\n *\n * An other good alternative could be an helper that would sort properties\n *\n * const value = sortProperties(value)\n * const expected = sortProperties({ foo: true, bar: true })\n s*\n */\nconst _assert = ({ actual, expected, message, anyOrder = false }) => {\n  const expectation = {\n    actual,\n    expected,\n  }\n\n  const comparison = compare(expectation, { anyOrder })\n  if (comparison.failed) {\n    const error = createAssertionError(message || comparisonToErrorMessage(comparison))\n    if (Error.captureStackTrace) Error.captureStackTrace(error, assert)\n    throw error\n  }\n}\n"
  ],
  "names": [
    "isComposite",
    "value",
    "isPrimitive",
    "findPreviousComparison",
    "comparison",
    "predicate",
    "createPreviousIterator",
    "current",
    "next",
    "previous",
    "getPrevious",
    "done",
    "iterator",
    "getLastChild",
    "children",
    "length",
    "getDeepestChild",
    "deepest",
    "lastChild",
    "getPreviousSibling",
    "parent",
    "index",
    "indexOf",
    "previousSibling",
    "deepestChild",
    "isRegExp",
    "somePrototypeMatch",
    "constructor",
    "name",
    "isArray",
    "isError",
    "isSet",
    "isMap",
    "prototype",
    "Object",
    "getPrototypeOf",
    "compare",
    "actual",
    "expected",
    "anyOrder",
    "createComparison",
    "type",
    "failed",
    "defaultComparer",
    "expectationSymbol",
    "Symbol",
    "for",
    "createExpectation",
    "data",
    "createNotExpectation",
    "comparer",
    "isNegativeZero",
    "createAnyExpectation",
    "expectedConstructor",
    "rest",
    "options",
    "subcompare",
    "compareIdentity",
    "expectedReference",
    "referenceComparisonCandidate",
    "actualReference",
    "comparePrototype",
    "compareIntegrity",
    "compareExtensibility",
    "comparePropertiesDescriptors",
    "compareProperties",
    "compareSymbolsDescriptors",
    "compareSymbols",
    "Set",
    "compareSetEntries",
    "Map",
    "compareMapEntries",
    "valueOf",
    "compareValueOfReturnValue",
    "compareToStringReturnValue",
    "subcomparison",
    "push",
    "Infinity",
    "isExtensible",
    "getIntegriy",
    "isFrozen",
    "isSealed",
    "expectedPropertyNames",
    "getOwnPropertyNames",
    "actualPropertyNames",
    "actualMissing",
    "filter",
    "actualExtra",
    "expectedMissing",
    "expectedExtra",
    "missing",
    "extra",
    "expectedKeys",
    "keys",
    "actualKeys",
    "every",
    "expectedSymbols",
    "getOwnPropertySymbols",
    "actualSymbols",
    "symbol",
    "expectedPropertyName",
    "comparePropertyDescriptor",
    "expectedSymbol",
    "property",
    "owner",
    "expectedDescriptor",
    "getOwnPropertyDescriptor",
    "actualDescriptor",
    "configurableComparison",
    "configurable",
    "enumerableComparison",
    "enumerable",
    "writableComparison",
    "writable",
    "isErrorPropertyIgnored",
    "isRegExpPropertyIgnored",
    "isFunctionPropertyIgnored",
    "getComparison",
    "get",
    "setComparison",
    "set",
    "valueComparison",
    "propertyToArrayIndex",
    "RegExpIgnoredProperties",
    "includes",
    "functionIgnoredProperties",
    "errorIgnoredProperties",
    "propertyAsNumber",
    "parseInt",
    "Number",
    "isInteger",
    "expectedEntries",
    "Array",
    "from",
    "values",
    "map",
    "actualEntries",
    "actualEntry",
    "expectedEntry",
    "entryComparison",
    "actualSize",
    "size",
    "expectedSize",
    "sizeComparison",
    "key",
    "entryMapping",
    "expectedEntryCandidates",
    "slice",
    "forEach",
    "find",
    "expectedEntryCandidate",
    "mappingComparison",
    "splice",
    "actualEntryMapping",
    "mapping",
    "mapEntryComparison",
    "mappingWithoutExpectedEntry",
    "undefined",
    "unexpectedEntry",
    "unexpectedEntryComparison",
    "expectedEntryWithoutActualEntry",
    "missingEntry",
    "missingEntryComparison",
    "toString",
    "symbolToWellKnownSymbol",
    "wellKnownSymbolName",
    "propertyToAccessorString",
    "description",
    "symbolToDescription",
    "keyFor",
    "inspect",
    "toStringResult",
    "openingParenthesisIndex",
    "closingParenthesisIndex",
    "propertyNameToDotNotationAllowed",
    "propertyName",
    "test",
    "dotNotationAllowedForProperty",
    "comparisonToPath",
    "comparisonPath",
    "ancestor",
    "unshift",
    "path",
    "reduce",
    "valueToWellKnown",
    "compositeWellKnownPath",
    "valueToCompositeWellKnownPath",
    "compositeWellKnownMap",
    "WeakMap",
    "primitiveWellKnownMap",
    "addWellKnownComposite",
    "visitValue",
    "has",
    "visitProperty",
    "descriptor",
    "e",
    "propertyValue",
    "global",
    "window",
    "valueToString",
    "anyComparisonToErrorMessage",
    "actualValue",
    "createAnyMessage",
    "defaultComparisonToErrorMessage",
    "expectedValue",
    "createUnequalValuesMessage",
    "referenceComparisonToErrorMessage",
    "isMissing",
    "isExtra",
    "createUnexpectedReferenceMessage",
    "unexpectedReferencePath",
    "createMissingReferenceMessage",
    "expectedReferencePath",
    "createUnequalRefencesMessage",
    "actualReferencePath",
    "comparisonToRootComparison",
    "findSelfOrAncestorComparison",
    "foundComparison",
    "prototypeComparisonToErrorMessage",
    "prototypeComparison",
    "rootComparison",
    "prototypeToString",
    "wellKnown",
    "expectedPrototype",
    "actualPrototype",
    "createUnequalPrototypesMessage",
    "createDetailedMessage",
    "message",
    "details",
    "string",
    "join",
    "propertiesComparisonToErrorMessage",
    "missingCount",
    "extraCount",
    "unexpectedProperties",
    "missingProperties",
    "at",
    "propertiesOrderComparisonToErrorMessage",
    "createUnexpectedPropertiesOrderMessage",
    "expectedPropertiesOrder",
    "propertyNameArrayToString",
    "actualPropertiesOrder",
    "propertyNameArray",
    "symbolsComparisonToErrorMessage",
    "hasExtra",
    "hasMissing",
    "createUnexpectedSymbolsMessage",
    "unexpectedSymbols",
    "symbolArrayToString",
    "createMissingSymbolsMessage",
    "missingSymbols",
    "createUnexpectedAndMissingSymbolsMessage",
    "symbolArray",
    "symbolsOrderComparisonToErrorMessage",
    "createUnexpectedSymbolsOrderMessage",
    "expectedSymbolsOrder",
    "actualSymbolsOrder",
    "setSizeComparisonToMessage",
    "createBiggerThanExpectedMessage",
    "createSmallerThanExpectedMessage",
    "mapEntryComparisonToErrorMessage",
    "isUnexpected",
    "createUnexpectedMapEntryErrorMessage",
    "createMissingMapEntryErrorMessage",
    "notComparisonToErrorMessage",
    "createNotMessage",
    "arrayLengthComparisonToMessage",
    "parentComparison",
    "grandParentComparison",
    "actualArray",
    "expectedArray",
    "actualLength",
    "expectedLength",
    "missingValues",
    "extraValues",
    "comparisonToErrorMessage",
    "failedComparison",
    "deepestComparison",
    "firstFunctionReturningSomething",
    "fns",
    "args",
    "i",
    "fn",
    "returnValue",
    "isAssertionError",
    "createAssertionError",
    "error",
    "Error",
    "assert",
    "firstArg",
    "_assert",
    "not",
    "any",
    "Constructor",
    "expectation",
    "captureStackTrace"
  ],
  "mappings": "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"
}